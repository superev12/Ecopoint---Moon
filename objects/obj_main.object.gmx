<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_main</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.alarmspeed = room_speed * 5; //Length of turns
global.transparency = 0.3;          //Degree of transparency for queued builds
global.cameraspeed = 5;             //The speed the camera scrolls
enum tool_list  {                   //The tool the user has selected
    empty,
    build,
    food,
    food_tank,
    water_tank,
    oxygen_tank
};
enum selected_obj_type_list {            //The object type of the selected object
    empty,
    character,
    corpse
};
global.selected_obj_type = selected_obj_type_list.empty;    //Initially, nonetype selected

global.tool_selected = tool_list.empty;
clicked_gui = false;                 //Used to check if the user clicked the gui

//Initialise resource variables
//Enums for resource definition
enum resource_types{
    none,
    food,
    water,
    oxygen,
    metal
}

population_count = 0;
farm_count = 0;
oxygen_tank_count = 0;
water_tank_count = 0;
//Stores default resource capacities
default_food_cap = 20;
default_oxygen_cap = 20;
default_water_cap = 20;
//Stores capacities of different stores
food_tank_capacity = 4;
water_tank_capacity = 4;
oxygen_tank_capacity = 4;
//Array 'resources' stores the resource quantities
resources[resource_types.none] =  0;
resources[resource_types.food] = 20;
resources[resource_types.oxygen] = 20;
resources[resource_types.water] = 20;
resources[resource_types.metal] = 20;
//Array 'resource_cap' stores the maximum quantities of resources (This updates, default resource quantities will not)
resource_cap[resource_types.food] = default_food_cap;
resource_cap[resource_types.oxygen] = default_oxygen_cap;
resource_cap[resource_types.water] = default_water_cap;

//Defines production values for machines
farm_resources_consumed[0] = resource_types.water;
farm_resources_consumed_quantity[0] = 2;
farm_resources_produced[0] = resource_types.food;
farm_resources_produced_quantity[0] = 4;
farm_resources_produced[1] = resource_types.oxygen;
farm_resources_produced_quantity[1] = 2;

//Defined production values for characters
char_eating_resources_consumed[0] = resource_types.food;
char_eating_resources_consumed_quantity[0] = 1;
char_eating_resources_produced[0] = resource_types.none;
char_eating_resources_produced_quantity[0] = 0;
char_drinking_resources_consumed[0] = resource_types.water;
char_drinking_resources_consumed_quantity[0] = 1;
char_drinking_resources_produced[0] = resource_types.none;
char_drinking_resources_produced_quantity[0] = 0;
char_breathing_resources_consumed[0] = resource_types.oxygen;
char_breathing_resources_consumed_quantity[0] = 1;
char_breathing_resources_produced[0] = resource_types.none;
char_breathing_resources_produced_quantity[0] = 0;

alarm[0] =  global.alarmspeed;
audio_play_sound(snd_main_theme, 1, true);
audio_master_gain(0);

//Aspect ratio juggling
window_w = window_get_width();
window_h = window_get_height();
window_x = window_get_x();
window_y = window_get_y();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>population_count = instance_number(obj_character);
farm_count = instance_number(obj_module_farm);
oxygen_tank_count = instance_number(obj_module_oxygen_tank);
water_tank_count = instance_number(obj_module_water_tank);
food_tank_count = instance_number(obj_module_food_tank);

//Generates resource requests for all modules
for (i = 0; i &lt; 32; i++)
{    
    for (j = 0; j &lt; 32; j++)
    {
        var temp = global.module_grid[# i, j];
        if temp[? data_slots.characters_in_room] &gt; 0 and temp[? data_slots.module] == module_types.farm
        {
            //Submit farm request
            show_debug_message("attempting to submit production request");
            submit_production_request(temp[? data_slots.room_object], 3, farm_resources_consumed, farm_resources_consumed_quantity, farm_resources_produced, farm_resources_produced_quantity);
        }
    }
}
//Generates resource requests for characters
for (i = 0; i &lt; instance_number(obj_character); i++)
{
    submit_production_request(instance_find(obj_character, i), 1, char_eating_resources_consumed, char_eating_resources_consumed_quantity, char_eating_resources_produced, char_eating_resources_produced_quantity);
    submit_production_request(instance_find(obj_character, i), 1, char_drinking_resources_consumed, char_drinking_resources_consumed_quantity, char_drinking_resources_produced, char_drinking_resources_produced_quantity);
    submit_production_request(instance_find(obj_character, i), 1, char_breathing_resources_consumed, char_breathing_resources_consumed_quantity, char_breathing_resources_produced, char_breathing_resources_produced_quantity);
}

//Handles all requests
for (i = 0; i &lt; ds_priority_size(obj_data.production_queue); i++)
{
    request_results = handle_production_request();
    show_debug_message("Handle request results: " + string(request_results));
    show_debug_message("Raw: " + string(request_results[0]));
    //show_debug_message(".object_index" + string(request_results[0].object_index));
    //show_debug_message("get_name " + string(object_get_name(request_results[0])));
    //show_debug_message("get_name(.object_index) " + string(object_get_name(request_results[0].object_index)));
    //Special handling for characters
    if (instance_exists(request_results[0]))
    {
        if (object_get_name(request_results[0].object_index) == "obj_character")
        {
            temp_input = request_results[3];
            temp_input_consumed = temp_input[0];
            show_debug_message("Recognised " + string(request_results[0]) + " as character.")
            if (request_results[1])
            {
                request_results[0].stats_values[map_resources_to_stats(temp_input_consumed[0])] = request_results[0].stats_values[map_resources_to_stats(temp_input_consumed[0])];
            }
            else if (request_results[0].stats_values[map_resources_to_stats(temp_input_consumed[0])] &gt; 0)
            {
                request_results[0].stats_values[map_resources_to_stats(temp_input_consumed[0])] -= 1;
            }
        }
    }
}

//show_debug_message("Active farms: " +  string(active_farms));

//Handles resource requests for all modules



//Depreciated food ticking code
/*
oxygen_gain = 0;
oxygen_loss = 0;
food_gain = active_farms*4;
food_loss = population_count;
water_gain = 0;
water_loss = farm_count;
food_cap = 10 + food_tank_count * 8

if (food + food_gain - food_loss &lt;= food_cap) and (food + food_gain - food_loss &gt;= 0)
{
    food = food + food_gain - food_loss;
}
else
{
    if (food + food_gain - food_loss &gt; food_cap)
    {
        food = food_cap;
    }
    else
    {
        food = 0;
    }
}
*/

alarm[0] = global.alarmspeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//show_debug_message("clicked_gui is" + string(clicked_gui))
//Counts resource storage
resource_cap[resource_types.food] = default_food_cap + food_tank_capacity * instance_number(obj_module_food_tank);
resource_cap[resource_types.oxygen] = default_oxygen_cap + oxygen_tank_capacity * instance_number(obj_module_oxygen_tank);
resource_cap[resource_types.water] = default_water_cap + water_tank_capacity * instance_number(obj_module_water_tank);

//Handles left click
if (mouse_check_button_pressed(mb_left) == true) and (clicked_gui == false)
{
    show_debug_message("Clicked at (" + string(mouse_x) + ", " + string(mouse_y) + ")")
    //show_debug_message("Found" + string(instance_position(mouse_x, mouse_y, obj_wall_left)))
    show_debug_message(string(global.tool_selected))
    //Handles based on selected tool
    if (global.tool_selected = tool_list.build)
    {
        show_debug_message("Grid location: (" + string(floor(mouse_x/64)) + ", " + string(floor(mouse_y/64)) + ")")
        create_room(floor(mouse_x/64), floor(mouse_y/64));
    }
    else if (global.tool_selected = tool_list.food) and (get_space_taken(floor(mouse_x/64), floor(mouse_y/64)))
    {
        show_debug_message("Attempting to build farm module")
        build_module(floor(mouse_x/64), floor(mouse_y/64), module_types.farm);
        global.tool_selected = tool_list.food; 
    }
    else if (global.tool_selected == tool_list.water_tank)
    {
        build_module(floor(mouse_x/64), floor(mouse_y/64), module_types.water_tank);
        global.tool_selected = tool_list.water_tank;  
    }
    else if (global.tool_selected == tool_list.oxygen_tank)
    {
        build_module(floor(mouse_x/64), floor(mouse_y/64), module_types.oxygen_tank);
        global.tool_selected = tool_list.oxygen_tank;  
    }
    else if (global.tool_selected == tool_list.food_tank)
    {
        build_module(floor(mouse_x/64), floor(mouse_y/64), module_types.food_tank);
        global.tool_selected = tool_list.food_tank;  
    }
    else
    {
        //No tool selected, so selection mode
        if (instance_position(mouse_x, mouse_y, obj_character))
        {
            //If we click a character
            global.selected_obj = instance_position(mouse_x, mouse_y, obj_character);
            global.selected_obj_type = selected_obj_type_list.character;
            show_debug_message("Selected character" + string(global.selected_obj));
            show_debug_message("Sprite is" + string(global.selected_obj.sprite_index));
        }
        else if (instance_position(mouse_x, mouse_y, obj_corpse))
        {
            //If we click a corpse
            global.selected_obj = instance_position(mouse_x, mouse_y, obj_corpse);
            global.selected_obj_type = selected_obj_type_list.corpse;
            show_debug_message("Selected character" + string(global.selected_obj));
            show_debug_message("Sprite is" + string(global.selected_obj.sprite_index));
        }
    }
}

if (mouse_check_button_pressed(mb_right) == true) and (clicked_gui == false)
{
    show_debug_message("(" + string(floor(mouse_x/64)) + ", " + string(floor(mouse_y/64)) + ")")
    show_debug_message(string(global.module_grid));
    var checked_tile = global.module_grid[# floor(mouse_x/64), floor(mouse_y/64)];
    show_debug_message("Databaseid: " + string(checked_tile))
    show_debug_message("Taken: " + string(checked_tile[? data_slots.taken]));
    show_debug_message("Module: " + string(checked_tile[? data_slots.module]));
    show_debug_message("Room object: " + string(checked_tile[? data_slots.room_object]));
    var temp = global.module_grid[# floor(mouse_x/64), floor(mouse_y/64)];
    show_debug_message("Number of characters in room is: " + string(temp[? data_slots.characters_in_room]));
}

//View aspect ratio maintaining, from Reddit 'https://www.reddit.com/r/gamemaker/comments/5cnsli/resize_window_without_scale/'
var _w = window_get_width();
var _h = window_get_height();
var _x = window_get_x();
var _y = window_get_y();
if (_w != window_w) or (_h != window_h) {
    view_wview[0] = _w;
    view_hview[0] = _h;
    view_wport[0] = _w;
    view_hport[0] = _h;
    view_xview[0] += _x - window_x;
    view_yview[0] += _y - window_y;
    surface_resize(application_surface,_w,_h);
    display_reset(0,0);
    window_w = _w;
    window_h = _h;
}
window_x = _x;
window_y = _y;

clicked_gui = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(0, 0, "Population: " + string(obj_main.population_count));
draw_text(0, 40, "Turn time: " + string(alarm[0]));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
